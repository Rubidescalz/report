name: SonarQube
on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build:
    name: Build and analyze
    runs-on: windows-latest
    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Instala el SDK de .NET 6 y el runtime de escritorio
      - name: Install .NET 6 SDK (Windows Desktop)
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '6.0.x'
      - name: Verify .NET installation
        run: dotnet --info

      - name: Cache SonarQube Cloud packages
        uses: actions/cache@v4
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarQube Cloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: ${{ runner.temp }}\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install SonarQube Cloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path ${{ runner.temp }}\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path ${{ runner.temp }}\scanner

      - name: Build and analyze (.NET 6 WinForms)
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          Write-Host 'üîç Iniciando an√°lisis SonarQube...'
          & "${{ runner.temp }}\scanner\dotnet-sonarscanner" begin /k:'Rubidescalz_reportegasto' /o:'rubidescalz' /d:sonar.token='${{ secrets.SONAR_TOKEN }}'

          # Compila la soluci√≥n (usa dotnet build en lugar de MSBuild)
          dotnet restore "ReporteGasto\ReporteGasto.sln"
          dotnet build "ReporteGasto\ReporteGasto.sln" --configuration Release --no-restore

          # Finaliza el an√°lisis
          & "${{ runner.temp }}\scanner\dotnet-sonarscanner" end /d:sonar.token='${{ secrets.SONAR_TOKEN }}'
