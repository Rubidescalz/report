name: SonarQube

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build:
    name: Build and analyze
    runs-on: windows-latest
    
    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'

      - name: Setup .NET 6 SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '6.0.x'
          
      # PASO CRÍTICO: Instala el Windows Desktop Runtime faltante
      - name: Install .NET 6.0 Windows Desktop Runtime
        shell: powershell
        run: |
          # Esto resuelve explícitamente el error NETSDK1127 para proyectos Windows Desktop
          # El 'setup-dotnet' solo instala el SDK base, no el paquete de escritorio.
          dotnet workload install Microsoft.NET.Sdk.WindowsDesktop --sdk-version 6.0.422

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Pasos de cacheo de SonarCloud (dejar como estaban)
      - name: Cache SonarQube Cloud packages
        uses: actions/cache@v4
        with:
          path: ~\.sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarQube Cloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: ${{ runner.temp }}\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install SonarQube Cloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path "$env:RUNNER_TEMP\scanner" -ItemType Directory -Force
          dotnet tool install dotnet-sonarscanner --tool-path "$env:RUNNER_TEMP\scanner"

      # PASO CORREGIDO: Build y Análisis usando dotnet
      - name: Build and analyze
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          $scannerPath = "$env:RUNNER_TEMP\scanner\dotnet-sonarscanner"
          $solutionPath = "ReporteGasto\ReporteGasto.sln"
          
          # 1. Inicia el análisis
          Write-Host "Inicia el análisis de SonarScanner..."
          & $scannerPath begin /k:"Rubidescalz_reportegasto" /o:"rubidescalz" /d:sonar.token=$env:SONAR_TOKEN /d:sonar.host.url="https://sonarcloud.io"

          # 2. Restaura las dependencias (Necesario para paquetes NuGet, aunque el workload arregla el targeting pack)
          Write-Host "Restaurando paquetes NuGet y dependencias (dotnet restore)..."
          dotnet restore $solutionPath

          # 3. Compila la solución (Debe funcionar ahora con el Desktop Runtime instalado)
          Write-Host "Compilando la solución (dotnet build)..."
          dotnet build $solutionPath --configuration Release --no-restore
          
          # 4. Finaliza el análisis
          Write-Host "Finaliza el análisis de SonarScanner..."
          & $scannerPath end /d:sonar.token=$env:SONAR_TOKEN
